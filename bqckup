#! venv/bin/python3

import typer, getpass, os
from typing import List
from pathlib import Path
from classes.bqckup import Bqckup
from classes.config import Config
from classes.server import Server
from classes.storage import Storage
from classes.database import Database
from classes.folder import Folder
from constant import VERSION, FOLDER_PATH, DATABASE_PATH, STORAGE_PATH
from rich import print
from rich.console import Group, Console
from rich.table import Table
from rich.panel import Panel
from helpers import send_anonymous_statistic

bq_cli = typer.Typer()

@bq_cli.command()
def list_folder():
    fl = Folder().list()
    table = Table(title="Folder list")

    table.add_column('#')
    table.add_column('yml')
    table.add_column('path')
    table.add_column('storage')

    for no, f in enumerate(fl):
        no += 1
        table.add_row(str(no), os.path.join('', f"{f['name']}.yml"), ', '.join(f['path']), ', '.join(f['options']['storage']))
    
    print("")
    Console().print(table)
    print("")
    
@bq_cli.command()
def remove_folder(name: str = typer.Option(...)):
    try:
        Folder().remove(name)
    except Exception as e:
        print(f"\n[red] Failed to remove folder's config, {e} [/red]\n")
    else:
        print(f"\n[green] Success [/green] \n")

@bq_cli.command()
def add_folder(
    name: str = typer.Option(...),
    path: List[Path] = typer.Option(...),
    storage: List[Path] = typer.Option(...),
    interval: str = typer.Option(...),
    retention: int = typer.Option(...),
    save_locally: bool = typer.Option(default=False),
    notification: bool = typer.Option(...)
):
    try:
        config_path = os.path.join(FOLDER_PATH, f"{name}.yml")

        if os.path.exists(config_path):
            print(f"[red] {config_path} already exists [/red]]\n")
            return
            
        Folder().add(
            name=name,
            path=path,
            storage=storage,
            interval=interval,
            retention=retention,
            save_locally=save_locally,
            notification=notification
        )
    except Exception as e:
        print(f"\n [red] Failed, {e} [/red] \n")
    else:
        print("\n [green] Success [/green] \n")

@bq_cli.command()
def add_database(
    name: str = typer.Option(...),
    type: str = typer.Option(...),
    username: str = typer.Option(...),
    password: str = typer.Option(...),
    database: str = typer.Option(...),
    port: str = typer.Option(None),
    storage: List[Path] = typer.Option(...),
    interval: str = typer.Option(...),
    retention: int = typer.Option(...),
    save_locally: bool = typer.Option(default=False),
    notification: bool = typer.Option(...)):

    if type.lower() not in Database().SUPPORTED_DATABASE:
        print(f"\n[red] {type} is not supported yet, feel free to open an issue [/red]\n")
        return 

    config_path = os.path.join(DATABASE_PATH, f"{name}.yml")

    if os.path.exists(config_path):
        print(f"[red] {config_path} already exists [/red]]\n")
        return

    if not port:
        port = 3306 if type.lower() == 'mysql' else 5432

    try:
        Database().add(
            name=name,
            type=type,
            username=username,
            password=password,
            database=database,
            port=port,
            storage=storage,
            interval=interval,
            retention=retention,
            save_locally=save_locally,
            notification=notification
        )
    except Exception as e:
        print(f"\n[red] Failed, {e} [/red]\n")
    else:
        print(f"\n[green] Success [/green]\n")

@bq_cli.command()
def remove_database(name: str = typer.Option(...)):
    try:
        Database().remove(name)
    except Exception as e:
        print(f"[red] Failed to remove database, {e}[/red]")
    else:
        print(f"[green] successfully removed the database [/green]")

@bq_cli.command()
def list_database():
    ld = Database().list()
    table = Table(title="Database list")

    # Table header
    table.add_column("#")
    table.add_column("YML")
    table.add_column("Username")
    table.add_column("Database")
    table.add_column("Type")

    for no, d in enumerate(ld):
        no += 1
        table.add_row(str(no), os.path.join(DATABASE_PATH, f"{d['name']}.yml"), d['username'], d['database'], d['type'])
    
    print("")
    Console().print(table)
    print("")

@bq_cli.command()
def add_storage(
    name: str = typer.Option(...), 
    bucket: str = typer.Option(...), 
    access_key_id: str = typer.Option(...), 
    secret_access_key: str = typer.Option(...), 
    region: str = typer.Option(...), 
    endpoint: str = typer.Option(...)
    ):
    try:
        config_path = os.path.join(STORAGE_PATH, f"{name}.yml")

        if os.path.exists(config_path):
            print(f"[red] {config_path} already exists [/red]]\n")
            return

        Storage().add(
            name=name, 
            bucket=bucket, 
            access_key_id=access_key_id, 
            secret_access_key=secret_access_key, 
            region=region, 
            endpoint=endpoint
        )
    except Exception as e:
        print(f"[red] Failed, {e} [/red]")
    else:
        print("[green] Success [/green]")

@bq_cli.command()
def remove_storage(name: str = typer.Option(...)):
    try:
        Storage().remove(name)
    except Exception as e:
        print("[red] Failed, {e} [/red]")
    else:
        print("[green] Success [/green]")

# TODO: Censor Credentials
@bq_cli.command()
def list_storage():
    sl = Storage().list()
    table = Table(title="Storage list")

    # Table Header
    table.add_column("#")
    table.add_column("YML")
    table.add_column("Bucket")
    table.add_column("Key ID")
    table.add_column("Secret Key")

    # Table Row
    for no, s in enumerate(sl):
        no += 1
        table.add_row(str(no), os.path.join(STORAGE_PATH, f"{s['name']}.yml"), s['bucket'], s['access_key_id'], s['secret_access_key'])

    print("")
    Console().print(table)
    print("")

@bq_cli.command()
def info():
    content = Group(
        Panel("Version  : %s" % VERSION),
        Panel("Website  : https://bqckup.com"),
        Panel("Twitter  : https://twitter.com/its_bqckup"),
        Panel("Github   : https://github.com/bqckup/bqckup"),
        Panel("Discord  : https://discord.gg/c4hT7YJg"),
    )
    print(Panel.fit(content, title="Bqckup information", title_align="left", border_style="yellow"))

@bq_cli.command()
def run(force:bool = typer.Option(False), name: str = typer.Option(None)):
    

@bq_cli.command()
def gui_active():
    from gevent.pywsgi import WSGIServer
    
    try:
        port = int(Config().read('web', 'port'))
        http_server = WSGIServer(('0.0.0.0', port), app)
        print(f"\nListening to http://{Server().ip()}:{port}\n", flush=True)
        http_server.serve_forever()
    except Exception as e:
        print(f"\n[red] Failed to start web server, {str(e)}[/red]\n")
    
if __name__ == "__main__":
    if getpass.getuser() != 'root':
        print("\n[red]Please run this script as root user[/red]\n")
    else:
        from app import app, initialization
        try:
            initialization()
            # send_anonymous_statistic()
        except Exception as e:
            print(f"Failed to initialize, {str(e)}")
        else:
            bq_cli()
